#include <stdio.h>
#include <stdbool.h>
#include <string.h>

// 재귀적으로 단어 배열을 만들어보는 함수
bool canMakeGoal(char* cards1[], int cards1_len, char* cards2[], int cards2_len, char* goal[], int goal_len, int goal_index) {
    // goal 배열을 모두 만들었으면 성공
    if (goal_index == goal_len) {
        return true;
    }
    
    // cards1의 단어를 사용할 수 있는 경우
    if (cards1_len > 0 && strcmp(cards1[0], goal[goal_index]) == 0) {
        char* new_cards1[cards1_len - 1];
        for (int i = 1; i < cards1_len; i++) {
            new_cards1[i - 1] = cards1[i];
        }
        if (canMakeGoal(new_cards1, cards1_len - 1, cards2, cards2_len, goal, goal_len, goal_index + 1)) {
            return true;
        }
    }
    
    // cards2의 단어를 사용할 수 있는 경우
    if (cards2_len > 0 && strcmp(cards2[0], goal[goal_index]) == 0) {
        char* new_cards2[cards2_len - 1];
        for (int i = 1; i < cards2_len; i++) {
            new_cards2[i - 1] = cards2[i];
        }
        if (canMakeGoal(cards1, cards1_len, new_cards2, cards2_len - 1, goal, goal_len, goal_index + 1)) {
            return true;
        }
    }
    
    return false;
}

char* solution(char* cards1[], int cards1_len, char* cards2[], int cards2_len, char* goal[], int goal_len) {
    // goal 배열의 각 단어를 순서대로 만들어본다
    if (canMakeGoal(cards1, cards1_len, cards2, cards2_len, goal, goal_len, 0)) {
        return "Yes";
    } else {
        return "No";
    }
}

int main() {
    char* cards1[] = {"i", "drink", "water"};
    int cards1_len = 3;
    char* cards2[] = {"want", "to"};
    int cards2_len = 2;
    char* goal[] = {"i", "want", "to", "drink", "water"};
    int goal_len = 5;
    
    char* result = solution(cards1, cards1_len, cards2, cards2_len, goal, goal_len);
    printf("%s\n", result);
    
    return 0;
}
